window.SIDEBAR_ITEMS = {"enum":[["Either","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases."],["Inhabited","Inhabited type."]],"fn":[["convert","Used to convert between integer representations."],["destroy","Destroys what it’s given."],["identity","Returns what it’s given."]],"macro":[["bail","Exits a function early with an error"],["lazy_static",""]],"mod":[["err","Errors for memthol, handled by `error_chain`."],["error_chain","Re-exports from `error_chain`."],["fmt","Utilities for formatting and printing `String`s."],["log","Log macros re-exports."],["ops","Overloadable operators."],["serde","Serde trait re-exports."],["sync","Useful synchronization primitives."],["time","Structures representing time in different ways."],["time_stats","Stopwatch, for time statistics."],["uid","UID types for charts, filters and subfilters."]],"struct":[["Arc","A thread-safe reference-counting pointer. ‘Arc’ stands for ‘Atomically Reference Counted’."],["BTMap","An ordered map based on a B-Tree."],["BTSet","An ordered set based on a B-Tree."],["HMap","A hash map implemented with quadratic probing and SIMD lookup."],["HSet","A hash set implemented as a `HashMap` where the value is `()`."],["Range","A range, inclusive on both ends."],["SampleRate","Represents a sample rate."]],"trait":[["Borrow","A trait for borrowing data."],["DurationExt","Adds functionalities to the `Duration` type."],["FromStr","Parse a value from a string"],["ResExt","Additional methods for `Result`, for easy interaction with this crate."],["TryFrom","Simple and safe type conversions that may fail in a controlled way under some circumstances. It is the reciprocal of [`TryInto`]."],["TryInto","An attempted conversion that consumes `self`, which may or may not be expensive."]],"type":[["AllocUid","Type of allocation UIDs."],["Clock","A duration since the start of the run as microseconds."],["DeltaClock","A difference between two `Clock` values."],["Pid","Type of PIDs."],["Res","Convenient wrapper around `std::Result`."],["SVec16","Alias type for `SmallVec` of max stack-size 16."],["SVec32","Alias type for `SmallVec` of max stack-size 32."],["SVec64","Alias type for `SmallVec` of max stack-size 64."],["SVec8","Alias type for `SmallVec` of max stack-size 8."]]};